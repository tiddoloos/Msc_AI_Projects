afglm=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numelec+numregim,+family=poisson,data=africa)
afglm=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numelec+numregim,family=poisson,data=africa)
summary(afglm)
summary(afglm1)
afglm1=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numregim,family=poisson,data=africa)
summary(afglm1)
afglm1=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size,family=poisson,data=africa)
summary(afglm1)
afglm1=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn,family=poisson,data=africa)
summary(afglm1)
afglm1=glm(miltcoup~oligarchy+pollib+parties+pctvote,family=poisson,data=africa)
summary(afglm1)
afglm1=glm(miltcoup~oligarchy+pollib+parties,family=poisson,data=africa)
summary(afglm1)
drop1(afglm1(miltcoup~oligarchy + pollib + parties, family = poisson, data = africa), test="Chisq")
drop1(afglm1, test="Chisq")
treeVolume <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/treeVolume.txt")
View(treeVolume)
treeaov=lm(treeVolume$volume~treeVolume$type,data=treeVolume)
treeaov=lm(treeVolume$volume~treeVolume$type,data=treeVolume)
summary(treeaov)
treeaov2=lm(treeVolume$volume~treeVolume$diameter+treeVolume$height+treeVolume$type,data=treeVolume)
summary(treeaov2)
drop1(treeaov2)
summary(treeaov2)
volume_beech = -63.78 + (4.69806*mean(treeVolume$diameter)+ (0.41725*mean(treeVolume$height))
volume_beech = -63.78 + (4.69806*mean(treeVolume$diameter)+ (0.41725*mean(treeVolume$height)))
volume_beech = -63.78 + (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)
volume_beech = -63.78 + (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height))
volume_beech = (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138
volume_oak =   (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138 - 1.30460
oak=data.frame(diameter=mean(treeVolume$diameter), height=mean(treeVolume$diameter), type="oak")
predict(treeaov2,oak,type="response")
oak=data.frame(diameter=mean(treeVolume$diameter), height=mean(treeVolume$diameter), type="oak")
treelm=lm(treeVolume$volume~treeVolume$diameter+treeVolume$height+treeVolume$type,data=treeVolume)
summary(treelm)
volume_beech = (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138
volume_oak =   (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138 - 1.30460
oak=data.frame(diameter=mean(treeVolume$diameter), height=mean(treeVolume$diameter), type="oak")
predict(treeaov2,oak,type="response")
predict(treelm,oak,type="response")
oak=data.frame(diameter = mean(treeVolume$diameter), height = mean(treeVolume$diameter), type="oak")
predict(treelm,oak,type="response")
oak=data.frame(diameter = mean(treeVolume$diameter), height = mean(treeVolume$height), type="oak")
predict(treelm,oak,type="response")
volume_beech = (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138
volume_oak =   (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138 - 1.30460
oak=data.frame(diameter = "mean(treeVolume$diameter)", height = "mean(treeVolume$height)", type="oak")
oak=data.frame(diameter = mean(treeVolume$diameter), height = mean(treeVolume$height), type="oak")
predict(treelm,oak,type="response")
predict(treelm,  oak,type="response")
treeaov = lm(treeVolume$volume~treeVolume$type, data=treeVolume)
summary(treeaov)
treelm=lm(treeVolume$volume~treeVolume$diameter+treeVolume$height+treeVolume$type,data=treeVolume)
summary(treelm)
volume_beech = (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138
volume_oak =   (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138 - 1.30460
oak=data.frame(diameter = mean(treeVolume$diameter), height = mean(treeVolume$height), type="oak")
predict(treelm,  oak, type="response")
summary(treelm)
treelm=lm(volume~diameter+height+type,data=treeVolume)
summary(treelm)
volume_beech = (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138
volume_oak =   (4.69806*mean(treeVolume$diameter)) + (0.41725*mean(treeVolume$height)) - 63.78138 - 1.30460
oak=data.frame(diameter = mean(treeVolume$diameter), height = mean(treeVolume$height), type="oak")
predict(treelm,  oak, type="response")
cow <- read.csv("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/cow.txt", sep="")
View(cow)
cow <- read.csv("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/cow.txt", sep="")
View(cow)
#ass2, Q3,4,5
cow$id=as.factor(cow$id); cow$per=as.factor(cow$per)
cowlm=lm(milk~order+id+per+treatment, data=cow)
summary(cowlm)
cowlm=lm(milk~id+order+per+treatment, data=cow)
cowlm=lm(milk~id+order+per+treatment, data=cow)
anova(cowlm)
summary(cowlm)
library(lme4)
cowlm2=lmer(milk~order+per+treatment+(1|id), data=cow)
summary(cowlm2)
anova(cowlm2)
anova(cowlm,cowlm2)
anova(cowlm2,cowlm)
cowlm2=lmer(milk~order+per+treatment+(1|id), data=cow, REML=FALSE)
anova(cowlm2)
anova(cowlm2,cowlm)
anova(cowlm,cowlm2)
anova(cowlm2,cowlm)
cowlm2=lmer(milk~order+per+treatment+(1|id), data=cow, REML=FALSE)
cowlm3=lmer(milk~order+per+(1|id), data=cow, REML=FALSE)
anova(cowlm3,cowlm2)
attach(cow)
t.test(milk[treatment=="A"],milk[treatment=="B"], paired=TRUE)
summary(cowlm)
cowlm=lm(milk~treatment+id+order+per, data=cow)
anova(cowlm)
summary(cowlm)
attach(cow)
t.test(milk[treatment=="A"],milk[treatment=="B"], paired=TRUE)
austen <- read.table("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/austen.txt", quote="\"", comment.char="")
View(austen)
expensescrime <- read.csv("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/expensescrime.txt", sep="")
View(expensescrime)
#Q5
attach(expensescrime)
boxplot(expand~bad, crime, lawyers, employ, pop)
boxplot(expand~(bad, crime, lawyers, employ, pop))
boxplot(expand~bad)
pairs(expensescrime)
round(cor(bodyfat),2)
round(cor(expensescrime),2)
cor(expensescrime)
crime=expensescrime
crime$state=NULL
cor(crime)
crimelm=lm(expend~bad+crime+lawyers+employ+pop,data=crime)
order(abs(residuals(crimelm)))
qqnorm(residuals(crimelm))
plot(resuduals(crimelm),fitted(crimelm))
plot(resuduals(crimelm),fitted(residuals(crimelm))
plot(resuduals(crimelm),fitted(residuals(crimelm))
)
plot(resuduals(crimelm),fitted(residuals(crimelm)))
plot(fitted(crimelm), resuduals(crimelm))
plot(fitted(crimelm), residuals(crimelm))
plot(1:100,cooks.distance(crimelm),type="b")
plot(1:6,cooks.distance(crimelm),type="b")
round(cooks.distance(crimelm),2)
plot(1:51,cooks.distance(crimelm),type="b")
#B
#step-up:
anova(lm(expend~bad, date=expensescrime))
anova(lm(expend~crime, date=expensescrime))
anova(lm(expend~lawyers, date=expensescrime))
anova(lm(expend~employ, date=expensescrime))
anova(lm(expend~pop, date=expensescrime))
#B
#step-up:
summary(lm(expend~bad, date=expensescrime))
summary(lm(expend~crime, date=expensescrime))
summary(lm(expend~lawyers, date=expensescrime))
summary(lm(expend~employ, date=expensescrime))
summary(lm(expend~pop, date=expensescrime))
summary(lm(expend~employ+bad, date=expensescrime))
summary(lm(expend~employ+crime, date=expensescrime))
summary(lm(expend~employ+lawyers, date=expensescrime))
summary(lm(expend~employ+pop, date=expensescrime))
summary(lm(expend~employ+lawyers+bad, date=expensescrime))
summary(lm(expend~employ+lawyers+crime, date=expensescrime))
summary(lm(expend~employ+lawyers+pop, date=expensescrime))
View(crime)
crime2=expensescrime
crime$state=NULL
cor(crime2)
crimelm=lm(expend~bad+crime+lawyers+employ+pop,data=crime)
order(abs(residuals(crimelm)))
crime2=expensescrime
crime2$state=NULL
cor(crime2)
pairs(expensescrime)
crimelm=lm(expend~bad+crime+lawyers+employ+pop,data=crime2)
order(abs(residuals(crimelm)))
qqnorm(residuals(crimelm))
plot(fitted(crimelm), residuals(crimelm))
#B
#step-up:
attach(expensescrime)
summary(lm(expend~bad, date=expensescrime))
summary(lm(expend~crime, date=expensescrime))
summary(lm(expend~lawyers, date=expensescrime))
summary(lm(expend~employ, date=expensescrime))
summary(lm(expend~pop, date=expensescrime))
summary(lm(expend~employ+bad, date=expensescrime))
summary(lm(expend~employ+crime, date=expensescrime))
summary(lm(expend~employ+lawyers, date=expensescrime))
summary(lm(expend~employ+pop, date=expensescrime))
summary(lm(expend~employ+lawyers+bad, date=expensescrime))
summary(lm(expend~employ+lawyers+crime, date=expensescrime))
summary(lm(expend~employ+lawyers+pop, date=expensescrime))
summary(lm(expend~employ+lawyers+expensescrime$crime, date=expensescrime))
#nothing else significant: so resulting model is:
crime_result=lm(expend~employ+lawyers, date=expensescrime))
#nothing else significant: so resulting model is:
summary(lm(expend~employ+lawyers, date=expensescrime))
#nothing else significant: so resulting model is:
step_up_model=lm(expend~employ+lawyers, date=expensescrime)
#B
#step-up:
attach(expensescrime)
#nothing else significant: so resulting model is:
step_up_model=lm(expend~employ+lawyers, date=expensescrime)
#step-down:
summary(lm(expend~employ+bad+lawyers+crime+pop, data=expensescrime))
#step-down:
summary(lm(expend~employ+bad+lawyers+pop, data=expensescrime))
#step-down:
summary(lm(expend~employ+bad+lawyers, data=expensescrime))
#step-down:
summary(lm(expend~employ+lawyers, data=expensescrime))
#step-down:
summary(lm(expend~bad+crime+lawyers+employ+pop, data=expensescrime))
#step-down:
summary(lm(expend~bad+lawyers+employ+pop, data=expensescrime))
#step-down:
summary(lm(expend~bad+lawyers+employ, data=expensescrime))
#step-down:
summary(lm(expend~lawyers+employ, data=expensescrime))
#nothing else significant: so resulting model is:
step_up_model=lm(expend~employ+lawyers, date=expensescrime)
summary(step_up_model)
#step-down:
summary(lm(expend~lawyers+employ, data=expensescrime))
#step-down:
step_down_model=lm(expend~lawyers+employ, data=expensescrime)
#diagnostic tests
par(mfrow=c(1,2))
plot(fitted(step_up_model),residuals(step_up_model))
qqnorm(residuals(step_up_model))
shapiro.test(residuals(step_up_model))
plot(fitted(step_down_model),residuals(step_down_model))
qqnorm(residuals(step_down_model))
shapiro.test(residuals(step_down_model))
#data points 5,8,35 and 44 must be removed as they cross the 1.0 cooks distance
#mark and ar considered as outliers.
crime3=crime2[c(5,8,35,44)]
#data points 5,8,35 and 44 must be removed as they cross the 1.0 cooks distance
#mark and ar considered as outliers.
crime3=crime2[-c(5,8,35,44), ]
crime3
#without outliers
crimelm2=lm(expend~bad+crime+lawyers+employ+pop,data=crime3)
order(abs(residuals(crimelm2)))
qqnorm(residuals(crimelm2))
plot(fitted(crimelm2), residuals(crimelm2))
round(cooks.distance(crimelm2),2)
plot(1:51,cooks.distance(crimelm2),type="b")
plot(1:47,cooks.distance(crimelm2),type="b")
round(cooks.distance(crimelm2),2)
plot(1:47,cooks.distance(crimelm2),type="b")
diet <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/diet.txt", header=FALSE)
View(diet)
diet <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/diet.txt", header=FALSE)
View(diet)
View(diet)
diet <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/diet.txt", header=FALSE)
View(diet)
diet <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/diet.txt", header=FALSE)
View(diet)
#FINAL ASSIGNMENT - Tiddo Loos - 2574974
diet=read.table(file="diet.txt")
diet
View(diet)
View(diet)
diet <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/diet.txt")
View(diet)
diet <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/diet.txt", header=FALSE, row.names=1)
View(diet)
View(diet)
#FINAL ASSIGNMENT - Tiddo Loos - 2574974
diet=read.table(file="diet.txt")
#FINAL ASSIGNMENT - Tiddo Loos - 2574974
diet=read.table(file="diet.txt", header = TRUE)
diet
#FINAL ASSIGNMENT - Tiddo Loos - 2574974
dietframe=read.table(file="diet.txt", header = TRUE)
View(diet)
View(diet)
remove(diet)
dietframe$gender = as.factor(dietframe$gender)
dietfram$diet = as.factor(dietfram$gender)
dietframe$diet = as.factor(dietframe$gender)
# check if samples are significantly different for the two types with paired t-tests
t.tes(dietframe$preweight,dietframe$weight6weeks,paired=TRUE)
# check if samples are significantly different for the two types with paired t-tests
t.test(dietframe$preweight,dietframe$weight6weeks,paired=TRUE)
par(mfrow=c(1,2))
qqnorm(dietframe$preweight)
qqnorm(dietframe$weight6weeks)
shapiro.test(dietframe$preweight)
shapiro.test(dietframe$weight6weeks)
shapiro.test(dietframe$preweight[1:24])
# check if samples are significantly different for the three types with paired t-tests
t.test(dietframe$preweight[1:24],dietframe$weight6weeks[1:24],paired=TRUE)
dietframe$preweight[1:24]
# check if samples are significantly different for the three types with paired t-tests
#diet1
t.test(dietframe$preweight[1:24],dietframe$weight6weeks[1:24],paired=TRUE)
#diet2
t.test(dietframe$preweight[25:51],dietframe$weight6weeks[25:51],paired=TRUE)
#diet3
t.test(dietframe$preweight[52:78],dietframe$weight6weeks[52:78],paired=TRUE)
par(mfrow=c(1,6))
qqnorm(dietframe$preweight)
par(mfrow=c(2,3))
qqnorm(dietframe$preweight[1:24])
par(mfrow=c(2,3))
qqnorm(dietframe$preweight[1:24]); qqnorm(dietframe$weight6weeks[1:24])
qqnorm(dietframe$preweight[25:51]); qqnorm(dietframe$weight6weeks[25:51])
qqnorm(dietframe$preweight[52:78]); qqnorm(dietframe$weight6weeks[52:78])
qqnorm(dietframe$preweight[1:24]); qqnorm(dietframe$weight6weeks[1:24])
qqnorm(dietframe$preweight[25:51]); qqnorm(dietframe$weight6weeks[25:51])
qqnorm(dietframe$preweight[52:78]); qqnorm(dietframe$weight6weeks[52:78])
shapiro.test(dietframe$preweight[1:24]); shapiro.test(dietframe$weight6weeks[1:24])
shapiro.test(dietframe$preweight[25:51]); shapiro.test(dietframe$weight6weeks[25:51])
shapiro.test(dietframe$preweight[52:78]); shapiro.test(dietframe$weight6weeks[52:78])
#The data for the pre/after diet weights of diet1 and diet3 are noramlly distributed and meet the
#assumtions for a t.test. But the pre/after weights for diet 2 are nor norammly distributed.
#so for diet type 2 we use a kolmogorov-Smirnov test:
ks.test(dietframe$preweight[25:51],dietframe$weight6weeks[25:51])
#The data for the pre/after diet weights of diet1 and diet3 are noramlly distributed and meet the
#assumtions for a t.test. But the pre/after weights for diet 2 are nor norammly distributed.
#so for diet type 2 we use a kolmogorov-Smirnov test:
pre_deet_two = dietframe$preweight[25:51]
#The data for the pre/after diet weights of diet1 and diet3 are noramlly distributed and meet the
#assumtions for a t.test. But the pre/after weights for diet 2 are nor norammly distributed.
#so for diet type 2 we use a kolmogorov-Smirnov test:
pre_diet_two = dietframe$preweight[25:51]
after_diet_two = dietframe$weight6weeks[25:51]
ks.test(pre_diet_two,after_diet_two)
qqnorm(dietframe$preweight; qqnorm(dietframe$weight6weeks)
qqnorm(dietframe$preweight); qqnorm(dietframe$weight6weeks)
shapiro.test(dietframe$preweight); shapiro.test(dietframe$weight6weeks)
#The data for the pre/after diet weights of diet1 and diet3 are normally distributed and meet the
#assumptions for a paired t.test. But the pre/after weights for diet 2 are not normally distributed.
#weights are not normally distributed so we have to use a different test for diet type2
#with the cook distance we can detect outliers and remove them from the dataset
round(cooks.distance(dietframe$preweight),2)
#The data for the pre/after diet weights of diet1 and diet3 are normally distributed and meet the
#assumptions for a paired t.test. But the pre/after weights for diet 2 are not normally distributed.
#weights are not normally distributed so we have to use a different test for diet type2
#with the cook distance we can detect outliers and remove them from the dataset
round(cooks.distance(dietframe$preweight),2)
#The data for the pre/after diet weights of diet1 and diet3 are normally distributed and meet the
#assumptions for a paired t.test. But the pre/after weights for diet 2 are not normally distributed.
#weights are not normally distributed so we have to use a different test for diet type2
#with the cook distance we can detect outliers and remove them from the dataset
cook=round(cooks.distance(dietframe$preweight),2)
#The data for the pre/after diet weights of diet1 and diet3 are normally distributed and meet the
#assumptions for a paired t.test. But the pre/after weights for diet 2 are not normally distributed.
#weights are not normally distributed so we have to use a different test for diet type2
dietfram2=dietframe
dietframe2[-c(26), ]
dietfram2[-c(26), ]
shapiro.test(dietfram2$preweight[25:51]); shapiro.test(dietfram2$weight6weeks[25:51])
dietfram2[-c(26), ]
shapiro.test(dietfram2$preweight[25:51]); shapiro.test(dietfram2$weight6weeks[25:51])
shapiro.test(dietframe$preweight[25:51]); shapiro.test(dietframe$weight6weeks[25:51])
diet <- read.delim("~/Documents/Msc Artificial Intelligence/EDDA/ass_practice/diet.txt", header=FALSE)
View(diet)
View(diet)
remove(diet)
#B
dietframe$weight.lost = dietframe$preweight-dietframe$weight6weeks
median(dietframe$weight.lost)
t.test(dietfram$weight.lost)
t.test(dietframe$weight.lost)
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
summary(dietlm1)
qqnorm(residuals(deitlm1))
qqnorm(residuals(dietlm1))
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
summary(dietlm1)
anova(dietlm1)
View(dietframe)
#FINAL ASSIGNMENT - Tiddo Loos - 2574974
dietframe=read.table(file="diet.txt", header = TRUE)
dietframe$gender = as.factor(dietframe$gender)
dietframe$diet = as.factor(dietframe$gender)
#FINAL ASSIGNMENT - Tiddo Loos - 2574974
dietframe=read.table(file="diet.txt", header = TRUE)
dietframe$gender = as.factor(dietframe$gender)
dietframe$diet = as.factor(dietframe$diet)
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
anova(dietlm1)
qqnorm(residuals(dietlm1))
plot(residuals(dietlm1), fitted(dietlm1))
plot(fitted(dietlm1), residuals(dietlm1))
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
anova(dietlm1)
summary(dietlm1)
summary(dietlm1)
qqnorm(residuals(dietlm1))
plot(fitted(dietlm1), residuals(dietlm1))
#FINAL ASSIGNMENT - Tiddo Loos - 2574974
dietframe=read.table(file="diet.txt", header = TRUE)
dietframe$gender = as.factor(dietframe$gender)
dietframe$diet = as.factor(dietframe$diet)
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
#B
dietframe$weight.lost = dietframe$preweight-dietframe$weight6weeks
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
summary(dietlm1)
qqnorm(residuals(dietlm1))
plot(fitted(dietlm1), residuals(dietlm1))
#D
dietlm2=lm(weight.lost~diet*gender, data=dietframe)
summary(dietlm2)
drop1(deitlm2)
drop1(dietlm2)
summary(dietlm3)
#there is no evidence for an interaction between gender and diet
dietlm3=lm(weight.lost~diet+gender, data=dietframe)
summary(dietlm3)
interaction.plot(diet,gender,psize)
#D
attach(dietframe)
interaction.plot(diet,gender,psize)
interaction.plot(dietfram$diet,dietdram$gender,psize)
interaction.plot(dietframe$diet,dietframe$gender,psize)
interaction.plot(dietframe$diet,dietframe$gender,dietframe$weight.lost)
interaction.plot(dietframe$gender,dietframe$diet,dietframe$weight.lost)
dietlm2=lm(weight.lost~diet*gender, data=dietframe)
anova(dietlm2)
summary(dietlm2)
#friedman:
friedman.test(weight.lost,diet,gender, data=dietframe)
#friedman: is usefull. however, on this datachages have to be made concerning the missing values.
friedman.test(weight.lost,diet,gender, data=dietframe)
#E
interaction.plot(dietframe$diet,dietframe$height,dietframe$weight.lost)
interaction.plot(dietframe$height,dietframe$diet,dietframe$weight.lost)
#friedman: is usefull. however, on this datachages have to be made concerning the missing values.
#with friedman it cn be test to whether diet has an influence on the lost weight, taking into account the
#gender. with the follow code that is possible: friedman.test(weight.lost,diet,gender, data=dietframe)
qqnorm(residuals(dietlm2))
shapiro.test(residuals(dietlm2))
plot(residuals(dietlm2), fitted(dietlm2))
plot(fitted(dietlm2),residuals(dietlm2))
#E
dietlm3=lm(weight.lost~diet*height, data=dietframe)
anova(dietlm3)
#E
dietlm3=lm(weight.lost~diet*height, data=dietframe)
anova(dietlm3)
summary(dietlm3)
dietlm3=lm(weight.lost~diet+height, data=dietframe)
#E
dietlm3=lm(weight.lost~diet*height, data=dietframe)
anova(dietlm3)
summary(dietlm3)
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
summary(dietlm1)
anova(dietlm4)
dietlm4=lm(weight.lost~height+diet, data=dietframe)
anova(dietlm4)
drop1(dietlm4)
sumary(drop1(dietlm4))
summary(drop1(dietlm4))
qqnorm(residuals(dietlm3))
shapiro.test(residuals(dietlm3)) #p>0.05, residuals are normally distributed
plot(fitted(dietlm3),residuals(dietlm3))
qqnorm(residuals(dietlm3))
#G
diet$lost.4kg = diet$weight.lost>4
#G
dietframe$lost.4kg = dietframe$weight.lost>4
deitfram$lost.4kg = as.factor(dietframe$lost.4kg)
dietframe$lost.4kg = as.factor(dietframe$lost.4kg)
# lost.4kg is a binary factor. So outcome Y is now a factor. one should use glm models to investigate
# the hypotheses of question c)d)e)
dietlm5=glm(weight.lost~diet*gender, data=dietframe)
# lost.4kg is a binary factor. So outcome Y is now a factor. one should use glm models to investigate
# the hypotheses of question c)d)e)
#hypothesys c):
dietlm5=glm(lost.4kg~diet*gender, data=dietframe)
#G
dietframe.fillna(0)
#G
dietframe.fillna('0')
#G
library("imputeTS")
data_4 = na.replace(data_4, 0)
dietlm2=lm(weight.lost~diet*gender, data=dietframe)
anova(dietlm2) #there is a significant interaction between diet and gender (p<0.05)
summary(dietlm2)
dietlm2=lm(weight.lost~gender*diet, data=dietframe)
anova(dietlm2)
#E
dietlm3=lm(weight.lost~diet*height, data=dietframe)
anova(dietlm3) #no evidence for interaction: p-value diet:height > 0.05
#C
dietlm1=lm(weight.lost~diet, data=dietframe)
summary(dietlm1)
summary(multi_lin)
multi_lin=lm(weight.lost~diet+height, data=dietframe)
summary(multi_lin)
diet1=data.frame(mean(dietframe$preweight), diet="1")
predict(dietlm1,  diet1, type="response")
#F
#For this question we take the model from C since, this model has one factor which is significant.
#diet:height did not show a significant interaction. Therefore, we choose to use the smaller and significant model
#from c
dietlm1=lm(weight.lost~diet, data=dietframe)
diet1=data.frame(mean(dietframe$preweight), diet="1")
predict(dietlm1,  diet1, type="response")
diet2=data.frame(mean(dietframe$preweight), diet="2")
predict(dietlm1,  diet2, type="response")
diet3=data.frame(mean(dietframe$preweight), diet="3")
predict(dietlm1,  diet3, type="response")
predict(dietlm1,  diet1, type="response")
diet2=data.frame(mean(dietframe$preweight), diet="2")
predict(dietlm1,  diet2, type="response")
diet3=data.frame(mean(dietframe$preweight), diet="3")
predict(dietlm1,  diet3, type="response")
